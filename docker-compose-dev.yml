version: "3"

services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    image: si-sorting-frontend
    container_name: si-sorting-frontend
    ports:
      - "3000:3000"
    environment:
      DEPLOY_MODE: compose
    volumes:
      - ./frontend:/app
    depends_on:
      - rest

  rest:
    build:
      context: rest
      dockerfile: Dockerfile
    image: si-sorting-rest
    container_name: si-sorting-rest
    ports:
      - "8000:8000"
    environment:
      REST_DEPLOY_MODE: compose
      WORKER_DEPLOY_MODE: compose
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BATCH_JOB_QUEUE: ${AWS_BATCH_JOB_QUEUE}
      AWS_BATCH_JOB_DEFINITION: ${AWS_BATCH_JOB_DEFINITION}
      DANDI_API_KEY: ${DANDI_API_KEY}
    volumes:
      - ./rest:/app
    depends_on:
      - database

  worker:
    # build:
    #   context: containers
    #   dockerfile: Dockerfile.combined
    # image: si-sorting-worker
    image: ghcr.io/catalystneuro/si-sorting-worker:latest
    container_name: si-sorting-worker
    ports:
      - "5000:5000"
    environment:
      WORKER_DEPLOY_MODE: compose
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DANDI_API_KEY: ${DANDI_API_KEY}
    volumes:
      - ./containers:/app
      - ./results:/results
      - ./logs:/logs
    runtime: nvidia
    devices:
      - "/dev/nvidia0:/dev/nvidia0"

  database:
    image: postgres:latest
    container_name: si-sorting-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: si-sorting-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  pgdata:
